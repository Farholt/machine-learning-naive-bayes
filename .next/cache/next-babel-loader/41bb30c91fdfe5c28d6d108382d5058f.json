{"ast":null,"code":"let csvToJson = require('convert-csv-to-json');\n/* TypeScript Class */\n\n\nimport { NaiveBayes } from '../../shared/class/NaiveBayes';\n\nconst accuracy_score = (pred, data, type, file) => {\n  let correct = 0;\n\n  for (let i = 0; i < pred.length; i++) {\n    if (pred[i] == data[i][type]) correct++;\n  }\n\n  return {\n    file: file,\n    correctly_classified: correct,\n    examples: pred.length,\n    accuracy: correct / data.length * 100\n  };\n};\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  const file = 'banknote_authentication.csv'; // const file = 'iris.csv'\n\n  /* Convert csv to json */\n\n  const data = csvToJson.fieldDelimiter(',').getJsonFromCsv(`./shared/data/${file}`);\n  const nb = new NaiveBayes();\n  nb.group(data);\n  let predictions = accuracy_score(nb.predict(data), data, nb.type, file);\n  res.send(JSON.stringify(predictions, null, 2));\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["csvToJson","require","NaiveBayes","accuracy_score","pred","data","type","file","correct","i","length","correctly_classified","examples","accuracy","nb","req","res","fieldDelimiter","getJsonFromCsv","group","predictions","predict","send","JSON","stringify"],"mappings":"AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;;;AACA,SAASC,UAAT,QAA2B,+BAA3B;;AAEA,MAAMC,cAAc,GAAG,CACrBC,IADqB,EAErBC,IAFqB,EAGrBC,IAHqB,EAIrBC,IAJqB,KAKV;AACX,MAAIC,OAAe,GAAG,CAAtB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIL,IAAI,CAACK,CAAD,CAAJ,IAAWJ,IAAI,CAACI,CAAD,CAAJ,CAAQH,IAAR,CAAf,EAA8BE,OAAO;AACtC;;AAED,SAAO;AACLD,IAAAA,IAAI,EAAEA,IADD;AAELI,IAAAA,oBAAoB,EAAEH,OAFjB;AAGLI,IAAAA,QAAQ,EAAER,IAAI,CAACM,MAHV;AAILG,IAAAA,QAAQ,EAAGL,OAAO,GAAGH,IAAI,CAACK,MAAhB,GAA0B;AAJ/B,GAAP;AAMD,CAlBD;AAoBA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD,QAAMT,IAAI,GAAG,6BAAb,CADwD,CAExD;;AAEA;;AACA,QAAMF,IAAI,GAAGL,SAAS,CACnBiB,cADU,CACK,GADL,EAEVC,cAFU,CAEM,iBAAgBX,IAAK,EAF3B,CAAb;AAIA,QAAMO,EAAE,GAAG,IAAIZ,UAAJ,EAAX;AACAY,EAAAA,EAAE,CAACK,KAAH,CAASd,IAAT;AACA,MAAIe,WAAW,GAAGjB,cAAc,CAACW,EAAE,CAACO,OAAH,CAAWhB,IAAX,CAAD,EAAmBA,IAAnB,EAAyBS,EAAE,CAACR,IAA5B,EAAkCC,IAAlC,CAAhC;AAEAS,EAAAA,GAAG,CAACM,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeJ,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAT;AACD,CAdD;;AAgBA,eAAeN,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/* TypeScript Class */\r\nimport { NaiveBayes } from '../../shared/class/NaiveBayes'\r\n\r\nconst accuracy_score = (\r\n  pred: Array<number>,\r\n  data: Array<number>,\r\n  type: string,\r\n  file: string\r\n): Object => {\r\n  let correct: number = 0\r\n\r\n  for (let i = 0; i < pred.length; i++) {\r\n    if (pred[i] == data[i][type]) correct++\r\n  }\r\n\r\n  return {\r\n    file: file,\r\n    correctly_classified: correct,\r\n    examples: pred.length,\r\n    accuracy: (correct / data.length) * 100\r\n  }\r\n}\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const file = 'banknote_authentication.csv'\r\n  // const file = 'iris.csv'\r\n\r\n  /* Convert csv to json */\r\n  const data = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv(`./shared/data/${file}`)\r\n\r\n  const nb = new NaiveBayes()\r\n  nb.group(data)\r\n  let predictions = accuracy_score(nb.predict(data), data, nb.type, file)\r\n\r\n  res.send(JSON.stringify(predictions, null, 2))\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"let csvToJson = require('convert-csv-to-json');\n/**\r\n * @description calculate mean\r\n * @param arr\r\n */\n\n\nconst mean = arr => {};\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  /* Convert csv to json */\n  const rawJson = csvToJson.fieldDelimiter(',').getJsonFromCsv('./shared/data/iris.csv');\n  let headers = null; // table headers, e.g. sepal_length\n\n  let obj = {};\n  /* Retrieve classes */\n\n  for (let i = 0; i < rawJson.length; i++) {\n    /* We only want to store it once and not every loop, why it has ! since it's initiated as null */\n    if (!headers) {\n      headers = Object.keys(rawJson[i]);\n      headers.pop(); // remove last element, e.g. species..., only works for datasets with class at the end, not optimal, but works for iris and banknote\n    }\n    /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\n\n\n    let tmp = rawJson[i][Object.keys(rawJson[i])[Object.keys(rawJson[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n    /* If certain object does not exist, create it */\n\n    if (!obj[tmp])\n      /* Create object and store table headers */\n      obj[tmp] = headers.reduce((acc, cur) => {\n        acc[cur] = cur;\n        return acc;\n      }, {});\n  }\n\n  res.send(JSON.stringify(obj, null, 2));\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["csvToJson","require","mean","arr","nb","req","res","rawJson","fieldDelimiter","getJsonFromCsv","headers","obj","i","length","Object","keys","pop","tmp","reduce","acc","cur","send","JSON","stringify"],"mappings":"AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAIC,GAAD,IAAiC,CAAE,CAAhD;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD;AACA,QAAMC,OAAO,GAAGP,SAAS,CACtBQ,cADa,CACE,GADF,EAEbC,cAFa,CAEE,wBAFF,CAAhB;AAIA,MAAIC,OAAsB,GAAG,IAA7B,CANwD,CAMtB;;AAClC,MAAIC,GAAG,GAAG,EAAV;AAEA;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC;AACA,QAAI,CAACF,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGI,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACK,CAAD,CAAnB,CAAV;AACAF,MAAAA,OAAO,CAACM,GAAR,GAFY,CAEE;AACf;AAED;;;AACA,QAAIC,GAAG,GACLV,OAAO,CAACK,CAAD,CAAP,CAAWE,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACK,CAAD,CAAnB,EAAwBE,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACK,CAAD,CAAnB,EAAwBC,MAAxB,GAAiC,CAAzD,CAAX,CADF,CARuC,CASmC;;AAE1E;;AACA,QAAI,CAACF,GAAG,CAACM,GAAD,CAAR;AACE;AACAN,MAAAA,GAAG,CAACM,GAAD,CAAH,GAAWP,OAAO,CAACQ,MAAR,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtCD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWA,GAAX;AACA,eAAOD,GAAP;AACD,OAHU,EAGR,EAHQ,CAAX;AAIH;;AAEDb,EAAAA,GAAG,CAACe,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeZ,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAT;AACD,CA/BD;;AAiCA,eAAeP,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/**\r\n * @description calculate mean\r\n * @param arr\r\n */\r\nconst mean = (arr: Array<number | string>) => {}\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  /* Convert csv to json */\r\n  const rawJson = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  let headers: Array<string> = null // table headers, e.g. sepal_length\r\n  let obj = {}\r\n\r\n  /* Retrieve classes */\r\n  for (let i = 0; i < rawJson.length; i++) {\r\n    /* We only want to store it once and not every loop, why it has ! since it's initiated as null */\r\n    if (!headers) {\r\n      headers = Object.keys(rawJson[i])\r\n      headers.pop() // remove last element, e.g. species..., only works for datasets with class at the end, not optimal, but works for iris and banknote\r\n    }\r\n\r\n    /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\r\n    let tmp =\r\n      rawJson[i][Object.keys(rawJson[i])[Object.keys(rawJson[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n    /* If certain object does not exist, create it */\r\n    if (!obj[tmp])\r\n      /* Create object and store table headers */\r\n      obj[tmp] = headers.reduce((acc, cur) => {\r\n        acc[cur] = cur\r\n        return acc\r\n      }, {})\r\n  }\r\n\r\n  res.send(JSON.stringify(obj, null, 2))\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"let csvToJson = require('convert-csv-to-json');\n/**\r\n * @description calculate mean\r\n * @param arr\r\n */\n\n\nconst mean = arr => {};\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  let classes = new Map(); // storing classes\n\n  /* Convert csv to json */\n\n  const rawJson = csvToJson.fieldDelimiter(',').getJsonFromCsv('./shared/data/iris.csv');\n  let headers = null; // table headers, e.g. sepal_length\n\n  /* Retrieve classes */\n\n  for (let i = 0; i < rawJson.length; i++) {\n    let tmp = ''; // class name, e.g. Iris-setosa\n\n    if (!classes.has(rawJson[i].species)) {\n      /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\n      tmp = rawJson[i][Object.keys(rawJson[i])[Object.keys(rawJson[i]).length - 1]];\n      classes.set(tmp, null);\n    }\n\n    if (!headers) headers = Object.keys(rawJson[i]);\n  }\n  /* Map -> Array */\n\n\n  let arr = Array.from(classes.keys()); //   mean(rawJson)\n\n  res.json(headers);\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["csvToJson","require","mean","arr","nb","req","res","classes","Map","rawJson","fieldDelimiter","getJsonFromCsv","headers","i","length","tmp","has","species","Object","keys","set","Array","from","json"],"mappings":"AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAIC,GAAD,IAAiC,CAAE,CAAhD;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD,MAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd,CADwD,CAChC;;AAExB;;AACA,QAAMC,OAAO,GAAGT,SAAS,CACtBU,cADa,CACE,GADF,EAEbC,cAFa,CAEE,wBAFF,CAAhB;AAIA,MAAIC,OAAO,GAAG,IAAd,CARwD,CAQrC;;AAEnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIE,GAAG,GAAG,EAAV,CADuC,CAC1B;;AACb,QAAI,CAACR,OAAO,CAACS,GAAR,CAAYP,OAAO,CAACI,CAAD,CAAP,CAAWI,OAAvB,CAAL,EAAsC;AACpC;AACAF,MAAAA,GAAG,GACDN,OAAO,CAACI,CAAD,CAAP,CAAWK,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,EAAwBK,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,EAAwBC,MAAxB,GAAiC,CAAzD,CAAX,CADF;AAGAP,MAAAA,OAAO,CAACa,GAAR,CAAYL,GAAZ,EAAiB,IAAjB;AACD;;AAED,QAAI,CAACH,OAAL,EAAcA,OAAO,GAAGM,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,CAAV;AACf;AAED;;;AACA,MAAIV,GAAG,GAAGkB,KAAK,CAACC,IAAN,CAAWf,OAAO,CAACY,IAAR,EAAX,CAAV,CAzBwD,CA2BxD;;AAEAb,EAAAA,GAAG,CAACiB,IAAJ,CAASX,OAAT;AACD,CA9BD;;AAgCA,eAAeR,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/**\r\n * @description calculate mean\r\n * @param arr\r\n */\r\nconst mean = (arr: Array<number | string>) => {}\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  let classes = new Map() // storing classes\r\n\r\n  /* Convert csv to json */\r\n  const rawJson = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  let headers = null // table headers, e.g. sepal_length\r\n\r\n  /* Retrieve classes */\r\n  for (let i = 0; i < rawJson.length; i++) {\r\n    let tmp = '' // class name, e.g. Iris-setosa\r\n    if (!classes.has(rawJson[i].species)) {\r\n      /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\r\n      tmp =\r\n        rawJson[i][Object.keys(rawJson[i])[Object.keys(rawJson[i]).length - 1]]\r\n\r\n      classes.set(tmp, null)\r\n    }\r\n\r\n    if (!headers) headers = Object.keys(rawJson[i])\r\n  }\r\n\r\n  /* Map -> Array */\r\n  let arr = Array.from(classes.keys())\r\n\r\n  //   mean(rawJson)\r\n\r\n  res.json(headers)\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
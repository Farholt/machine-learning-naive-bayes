{"ast":null,"code":"import { NaiveBayes } from '../../shared/class/NaiveBayes';\n\nlet csvToJson = require('convert-csv-to-json');\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  /* Convert csv to json */\n  const data = csvToJson.fieldDelimiter(',').getJsonFromCsv('./shared/data/iris.csv');\n  const tmp = csvToJson.fieldDelimiter(',').getJsonFromCsv('./shared/data/iris.csv');\n  const nb = new NaiveBayes();\n  nb.group(data);\n  let predictions = nb.predict(data);\n  let correct = 0;\n\n  for (let i = 0; i < predictions.length; i++) {\n    let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]];\n    if (predictions[i] == data[i].species) correct++;\n  } // console.log(correct)\n  // console.log(data.length)\n\n\n  console.log(correct / data.length * 100);\n  res.send(JSON.stringify(tmp, null, 2));\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["NaiveBayes","csvToJson","require","nb","req","res","data","fieldDelimiter","getJsonFromCsv","tmp","group","predictions","predict","correct","i","length","Object","keys","species","console","log","send","JSON","stringify"],"mappings":"AACA,SAASA,UAAT,QAA2B,+BAA3B;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD;AACA,QAAMC,IAAI,GAAGL,SAAS,CACnBM,cADU,CACK,GADL,EAEVC,cAFU,CAEK,wBAFL,CAAb;AAIA,QAAMC,GAAG,GAAGR,SAAS,CAClBM,cADS,CACM,GADN,EAETC,cAFS,CAEM,wBAFN,CAAZ;AAIA,QAAML,EAAE,GAAG,IAAIH,UAAJ,EAAX;AACAG,EAAAA,EAAE,CAACO,KAAH,CAASJ,IAAT;AACA,MAAIK,WAAW,GAAGR,EAAE,CAACS,OAAH,CAAWN,IAAX,CAAlB;AAEA,MAAIO,OAAO,GAAG,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIL,GAAG,GAAGH,IAAI,CAACQ,CAAD,CAAJ,CAAQE,MAAM,CAACC,IAAP,CAAYX,IAAI,CAACQ,CAAD,CAAhB,EAAqBE,MAAM,CAACC,IAAP,CAAYX,IAAI,CAACQ,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAV;AAEA,QAAIJ,WAAW,CAACG,CAAD,CAAX,IAAkBR,IAAI,CAACQ,CAAD,CAAJ,CAAQI,OAA9B,EAAuCL,OAAO;AAC/C,GApBuD,CAsBxD;AACA;;;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAaP,OAAO,GAAGP,IAAI,CAACS,MAAhB,GAA0B,GAAtC;AAEAV,EAAAA,GAAG,CAACgB,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAed,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAT;AACD,CA3BD;;AA6BA,eAAeN,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport { NaiveBayes } from '../../shared/class/NaiveBayes'\r\n\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  /* Convert csv to json */\r\n  const data = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  const tmp = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  const nb = new NaiveBayes()\r\n  nb.group(data)\r\n  let predictions = nb.predict(data)\r\n\r\n  let correct = 0\r\n\r\n  for (let i = 0; i < predictions.length; i++) {\r\n    let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]\r\n\r\n    if (predictions[i] == data[i].species) correct++\r\n  }\r\n\r\n  // console.log(correct)\r\n  // console.log(data.length)\r\n  console.log((correct / data.length) * 100)\r\n\r\n  res.send(JSON.stringify(tmp, null, 2))\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { NaiveBayes } from '../../shared/class/NaiveBayes';\n\nlet csvToJson = require('convert-csv-to-json');\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  /* Convert csv to json */\n  const data = csvToJson.fieldDelimiter(',').getJsonFromCsv('./shared/data/iris.csv');\n  const nb = new NaiveBayes();\n  nb.group(data);\n  res.send(JSON.stringify(nb.arr, null, 2)); // for (let i = 0; i < data.length; i++) {\n  //     /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\n  //     let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\n  //     /* Attributes of class */\n  //     let attributes = Object.keys(data[i])\n  //     this.type = attributes.pop() // save and remove, e.g. \"species\" from object\n  //     let arr = []\n  //     if (data[i][this.type] === tmp) {\n  //       arr.push(data[i])\n  //     }\n  //     this.obj[tmp] = arr\n  //     // if (!this.obj[tmp]) {\n  //     //   /* Create object and store table headers*/\n  //     //   this.obj[tmp] = attributes.reduce((acc, cur) => {\n  //     //     acc[cur] = null\n  //     //     return acc\n  //     //   }, {})\n  //     // }\n  //     // this.fit(tmp, data[i])\n  //   }\n  //   console.log(this.obj)\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["NaiveBayes","csvToJson","require","nb","req","res","data","fieldDelimiter","getJsonFromCsv","group","send","JSON","stringify","arr"],"mappings":"AACA,SAASA,UAAT,QAA2B,+BAA3B;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD;AACA,QAAMC,IAAI,GAAGL,SAAS,CACnBM,cADU,CACK,GADL,EAEVC,cAFU,CAEK,wBAFL,CAAb;AAIA,QAAML,EAAE,GAAG,IAAIH,UAAJ,EAAX;AACAG,EAAAA,EAAE,CAACM,KAAH,CAASH,IAAT;AAEAD,EAAAA,GAAG,CAACK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeT,EAAE,CAACU,GAAlB,EAAuB,IAAvB,EAA6B,CAA7B,CAAT,EATwD,CAWxD;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAnCD;;AAqCA,eAAeV,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport { NaiveBayes } from '../../shared/class/NaiveBayes'\r\n\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  /* Convert csv to json */\r\n  const data = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  const nb = new NaiveBayes()\r\n  nb.group(data)\r\n\r\n  res.send(JSON.stringify(nb.arr, null, 2))\r\n\r\n  // for (let i = 0; i < data.length; i++) {\r\n  //     /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\r\n  //     let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n  //     /* Attributes of class */\r\n  //     let attributes = Object.keys(data[i])\r\n  //     this.type = attributes.pop() // save and remove, e.g. \"species\" from object\r\n\r\n  //     let arr = []\r\n  //     if (data[i][this.type] === tmp) {\r\n  //       arr.push(data[i])\r\n  //     }\r\n  //     this.obj[tmp] = arr\r\n\r\n  //     // if (!this.obj[tmp]) {\r\n  //     //   /* Create object and store table headers*/\r\n  //     //   this.obj[tmp] = attributes.reduce((acc, cur) => {\r\n  //     //     acc[cur] = null\r\n  //     //     return acc\r\n  //     //   }, {})\r\n  //     // }\r\n  //     // this.fit(tmp, data[i])\r\n  //   }\r\n  //   console.log(this.obj)\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
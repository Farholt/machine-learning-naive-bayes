{"ast":null,"code":"let csvToJson = require('convert-csv-to-json');\n/* TypeScript Class */\n\n\nimport { NaiveBayes } from '../../shared/class/NaiveBayes';\n\nconst accuracy_score = (pred, data, type) => {\n  let correct = 0;\n\n  for (let i = 0; i < pred.length; i++) {\n    if (pred[i] == data[i][type]) correct++;\n  }\n\n  return correct / data.length * 100;\n};\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  /* Convert csv to json */\n  const data = csvToJson.fieldDelimiter(',') // .getJsonFromCsv('./shared/data/banknote_authentication.csv')\n  .getJsonFromCsv('./shared/data/iris.csv');\n  const nb = new NaiveBayes();\n  nb.group(data);\n  let predictions = accuracy_score(nb.predict(data), data, nb.type);\n  res.send(JSON.stringify(predictions, null, 2));\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["csvToJson","require","NaiveBayes","accuracy_score","pred","data","type","correct","i","length","nb","req","res","fieldDelimiter","getJsonFromCsv","group","predictions","predict","send","JSON","stringify"],"mappings":"AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;;;AACA,SAASC,UAAT,QAA2B,+BAA3B;;AAEA,MAAMC,cAAc,GAAG,CACrBC,IADqB,EAErBC,IAFqB,EAGrBC,IAHqB,KAIlB;AACH,MAAIC,OAAe,GAAG,CAAtB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIJ,IAAI,CAACI,CAAD,CAAJ,IAAWH,IAAI,CAACG,CAAD,CAAJ,CAAQF,IAAR,CAAf,EAA8BC,OAAO;AACtC;;AAED,SAAQA,OAAO,GAAGF,IAAI,CAACI,MAAhB,GAA0B,GAAjC;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD;AACA,QAAMP,IAAI,GAAGL,SAAS,CACnBa,cADU,CACK,GADL,EAEX;AAFW,GAGVC,cAHU,CAGK,wBAHL,CAAb;AAKA,QAAMJ,EAAE,GAAG,IAAIR,UAAJ,EAAX;AACAQ,EAAAA,EAAE,CAACK,KAAH,CAASV,IAAT;AACA,MAAIW,WAAW,GAAGb,cAAc,CAACO,EAAE,CAACO,OAAH,CAAWZ,IAAX,CAAD,EAAmBA,IAAnB,EAAyBK,EAAE,CAACJ,IAA5B,CAAhC;AAEAM,EAAAA,GAAG,CAACM,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeJ,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAT;AACD,CAZD;;AAcA,eAAeN,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/* TypeScript Class */\r\nimport { NaiveBayes } from '../../shared/class/NaiveBayes'\r\n\r\nconst accuracy_score = (\r\n  pred: Array<number>,\r\n  data: Array<number>,\r\n  type: string\r\n) => {\r\n  let correct: number = 0\r\n\r\n  for (let i = 0; i < pred.length; i++) {\r\n    if (pred[i] == data[i][type]) correct++\r\n  }\r\n\r\n  return (correct / data.length) * 100\r\n}\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  /* Convert csv to json */\r\n  const data = csvToJson\r\n    .fieldDelimiter(',')\r\n    // .getJsonFromCsv('./shared/data/banknote_authentication.csv')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  const nb = new NaiveBayes()\r\n  nb.group(data)\r\n  let predictions = accuracy_score(nb.predict(data), data, nb.type)\r\n\r\n  res.send(JSON.stringify(predictions, null, 2))\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
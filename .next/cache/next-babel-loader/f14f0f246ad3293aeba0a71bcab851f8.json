{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class NaiveBayes {\n  constructor() {\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"arr\", void 0);\n\n    _defineProperty(this, \"group\", data => {\n      let arr = [];\n      let tmp = '';\n\n      for (let i = 0; i < data.length; i++) {\n        tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n        if (!this.obj[tmp]) {\n          this.obj[tmp] = [];\n        }\n      }\n\n      for (let j = 0; j < Object.keys(this.obj).length; j++) {\n        for (let k = 0; k < data.length; k++) {\n          /* Attributes of class */\n          let attributes = Object.keys(data[k]);\n          let type = attributes.pop(); // save and remove, e.g. \"species\" from object\n\n          if (Object.keys(this.obj)[j] === data[k][type]) console.log(data[k]);\n        }\n      }\n    });\n\n    _defineProperty(this, \"fit\", (x, y) => {// this.obj[x].sepal_length += parseFloat(y['sepal_length'])\n    });\n\n    this.obj = {};\n    this.arr = [];\n  }\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\n\n\n  predict() {\n    return null;\n  }\n\n  accuracy_score() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/shared/class/NaiveBayes.ts"],"names":["NaiveBayes","constructor","data","arr","tmp","i","length","Object","keys","obj","j","k","attributes","type","pop","console","log","x","y","predict","accuracy_score"],"mappings":";;AAAA,OAAO,MAAMA,UAAN,CAAiB;AAItBC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA,mCASLC,IAAD,IAAkC;AACxC,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,QAAAA,GAAG,GAAGF,IAAI,CAACG,CAAD,CAAJ,CAAQE,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACG,CAAD,CAAhB,EAAqBE,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACG,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAN,CADoC,CACiC;;AACrE,YAAI,CAAC,KAAKG,GAAL,CAASL,GAAT,CAAL,EAAoB;AAClB,eAAKK,GAAL,CAASL,GAAT,IAAgB,EAAhB;AACD;AACF;;AAED,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACC,IAAP,CAAY,KAAKC,GAAjB,EAAsBH,MAA1C,EAAkDI,CAAC,EAAnD,EAAuD;AACrD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACI,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AACpC;AACA,cAAIC,UAAU,GAAGL,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACS,CAAD,CAAhB,CAAjB;AACA,cAAIE,IAAI,GAAGD,UAAU,CAACE,GAAX,EAAX,CAHoC,CAGR;;AAE5B,cAAIP,MAAM,CAACC,IAAP,CAAY,KAAKC,GAAjB,EAAsBC,CAAtB,MAA6BR,IAAI,CAACS,CAAD,CAAJ,CAAQE,IAAR,CAAjC,EAAgDE,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACS,CAAD,CAAhB;AACjD;AACF;AACF,KA7Ba;;AAAA,iCAoCR,CAACM,CAAD,EAAIC,CAAJ,KAAgB,CACpB;AACD,KAtCa;;AACZ,SAAKT,GAAL,GAAW,EAAX;AACA,SAAKN,GAAL,GAAW,EAAX;AACD;AAED;AACF;AACA;AACA;;;AAgCEgB,EAAAA,OAAO,GAAW;AAChB,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAW;AACvB,WAAO,IAAP;AACD;;AAlDqB","sourcesContent":["export class NaiveBayes {\r\n  obj: Object\r\n  arr: Array<string | number>\r\n\r\n  constructor() {\r\n    this.obj = {}\r\n    this.arr = []\r\n  }\r\n\r\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\r\n  group = (data: Array<string | number>) => {\r\n    let arr = []\r\n    let tmp = ''\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n      if (!this.obj[tmp]) {\r\n        this.obj[tmp] = []\r\n      }\r\n    }\r\n\r\n    for (let j = 0; j < Object.keys(this.obj).length; j++) {\r\n      for (let k = 0; k < data.length; k++) {\r\n        /* Attributes of class */\r\n        let attributes = Object.keys(data[k])\r\n        let type = attributes.pop() // save and remove, e.g. \"species\" from object\r\n\r\n        if (Object.keys(this.obj)[j] === data[k][type]) console.log(data[k])\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description this method helps train the model\r\n   * @param x\r\n   * @param y\r\n   */\r\n  fit = (x, y): void => {\r\n    // this.obj[x].sepal_length += parseFloat(y['sepal_length'])\r\n  }\r\n\r\n  predict(): number {\r\n    return null\r\n  }\r\n\r\n  accuracy_score(): number {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
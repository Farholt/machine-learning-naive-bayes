{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst labelToInt = obj => {\n  let size = 0;\n\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      obj[size] = obj[key];\n      delete obj[key];\n      size++;\n    }\n  }\n\n  return obj;\n};\n\nexport class NaiveBayes {\n  constructor() {\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"label\", void 0);\n\n    _defineProperty(this, \"group\", data => {\n      for (let i = 0; i < data.length; i++) {\n        let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n        if (!this.obj[tmp]) {\n          this.label.push([this.label.length, tmp]);\n          this.obj[tmp] = [];\n        }\n        /* Attributes of class */\n\n\n        let attributes = Object.keys(data[i]);\n        let type = attributes.pop(); // save and remove, e.g. \"species\" from object\n\n        if (data[i][type] === tmp) {\n          data[i][type] = this.label.length - 1;\n          this.obj[tmp].push(data[i]);\n        }\n      }\n      /* Rename labels to integer */\n\n\n      this.obj = labelToInt(this.obj); // for (let key in this.obj) {\n      //   if (this.obj.hasOwnProperty(key)) {\n      //     this.fit(this.obj[key], this.label)\n      //   }\n      // }\n    });\n\n    _defineProperty(this, \"fit\", (X, y) => {\n      console.log(y);\n    });\n\n    this.obj = {};\n    this.label = [];\n  }\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\n\n\n  predict() {\n    return null;\n  }\n\n  accuracy_score() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/shared/class/NaiveBayes.ts"],"names":["labelToInt","obj","size","key","hasOwnProperty","NaiveBayes","constructor","data","i","length","tmp","Object","keys","label","push","attributes","type","pop","X","y","console","log","predict","accuracy_score"],"mappings":";;AAAA,MAAMA,UAAU,GAAIC,GAAD,IAAS;AAC1B,MAAIC,IAAI,GAAG,CAAX;;AAEA,OAAK,IAAIC,GAAT,IAAgBF,GAAhB,EAAqB;AACnB,QAAIA,GAAG,CAACG,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3BF,MAAAA,GAAG,CAACC,IAAD,CAAH,GAAYD,GAAG,CAACE,GAAD,CAAf;AACA,aAAOF,GAAG,CAACE,GAAD,CAAV;AACAD,MAAAA,IAAI;AACL;AACF;;AAED,SAAOD,GAAP;AACD,CAZD;;AAcA,OAAO,MAAMI,UAAN,CAAiB;AAItBC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA,mCASLC,IAAD,IAAkC;AACxC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIE,GAAG,GAAGH,IAAI,CAACC,CAAD,CAAJ,CAAQG,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,CAAD,CAAhB,EAAqBG,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAV,CADoC,CACqC;;AAEzE,YAAI,CAAC,KAAKR,GAAL,CAASS,GAAT,CAAL,EAAoB;AAClB,eAAKG,KAAL,CAAWC,IAAX,CAAgB,CAAC,KAAKD,KAAL,CAAWJ,MAAZ,EAAoBC,GAApB,CAAhB;AACA,eAAKT,GAAL,CAASS,GAAT,IAAgB,EAAhB;AACD;AAED;;;AACA,YAAIK,UAAU,GAAGJ,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,CAAD,CAAhB,CAAjB;AACA,YAAIQ,IAAI,GAAGD,UAAU,CAACE,GAAX,EAAX,CAVoC,CAUR;;AAE5B,YAAIV,IAAI,CAACC,CAAD,CAAJ,CAAQQ,IAAR,MAAkBN,GAAtB,EAA2B;AACzBH,UAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQQ,IAAR,IAAgB,KAAKH,KAAL,CAAWJ,MAAX,GAAoB,CAApC;AACA,eAAKR,GAAL,CAASS,GAAT,EAAcI,IAAd,CAAmBP,IAAI,CAACC,CAAD,CAAvB;AACD;AACF;AAED;;;AACA,WAAKP,GAAL,GAAWD,UAAU,CAAC,KAAKC,GAAN,CAArB,CApBwC,CAsBxC;AACA;AACA;AACA;AACA;AACD,KApCa;;AAAA,iCA2CR,CAACiB,CAAD,EAAmBC,CAAnB,KAA8C;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KA7Ca;;AACZ,SAAKlB,GAAL,GAAW,EAAX;AACA,SAAKY,KAAL,GAAa,EAAb;AACD;AAED;AACF;AACA;AACA;;;AAuCES,EAAAA,OAAO,GAAW;AAChB,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAW;AACvB,WAAO,IAAP;AACD;;AAzDqB","sourcesContent":["const labelToInt = (obj) => {\r\n  let size = 0\r\n\r\n  for (let key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      obj[size] = obj[key]\r\n      delete obj[key]\r\n      size++\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nexport class NaiveBayes {\r\n  obj: Object\r\n  label: Array<any>\r\n\r\n  constructor() {\r\n    this.obj = {}\r\n    this.label = []\r\n  }\r\n\r\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\r\n  group = (data: Array<string | number>) => {\r\n    for (let i = 0; i < data.length; i++) {\r\n      let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n      if (!this.obj[tmp]) {\r\n        this.label.push([this.label.length, tmp])\r\n        this.obj[tmp] = []\r\n      }\r\n\r\n      /* Attributes of class */\r\n      let attributes = Object.keys(data[i])\r\n      let type = attributes.pop() // save and remove, e.g. \"species\" from object\r\n\r\n      if (data[i][type] === tmp) {\r\n        data[i][type] = this.label.length - 1\r\n        this.obj[tmp].push(data[i])\r\n      }\r\n    }\r\n\r\n    /* Rename labels to integer */\r\n    this.obj = labelToInt(this.obj)\r\n\r\n    // for (let key in this.obj) {\r\n    //   if (this.obj.hasOwnProperty(key)) {\r\n    //     this.fit(this.obj[key], this.label)\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * @description this method helps train the model\r\n   * @param x\r\n   * @param y\r\n   */\r\n  fit = (X: Array<number>, y: Array<number>): void => {\r\n    console.log(y)\r\n  }\r\n\r\n  predict(): number {\r\n    return null\r\n  }\r\n\r\n  accuracy_score(): number {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
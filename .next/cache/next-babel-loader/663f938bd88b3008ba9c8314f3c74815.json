{"ast":null,"code":"let csvToJson = require('convert-csv-to-json');\n/**\r\n * @description calculate mean\r\n * @param arr\r\n */\n\n\nconst mean = arr => {};\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\n\n\nconst nb = (req, res) => {\n  let classes = new Map(); // storing classes\n\n  /* Convert csv to json */\n\n  const rawJson = csvToJson.fieldDelimiter(',').getJsonFromCsv('./shared/data/iris.csv');\n  let headers = null; // table headers, e.g. sepal_length\n\n  /* Retrieve classes */\n\n  for (let i = 0; i < rawJson.length; i++) {\n    if (!classes.has(rawJson[i].species)) {\n      /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\n      let tmp = rawJson[i][Object.keys(rawJson[i])[Object.keys(rawJson[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n      let attribute = Object.keys(rawJson[i]).toString();\n      classes.set(tmp, {\n        [attribute]: null\n      });\n    }\n    /* We only want to store it once and not every loop, why it has ! since it's initiated as null */\n\n\n    if (!headers) {\n      headers = Object.keys(rawJson[i]);\n      headers.pop(); // remove last element, e.g. species... again, only works if it's stored last in table\n    }\n  }\n  /* Map -> Array ... it has the classes names */\n\n\n  let arr = Array.from(classes.keys());\n  console.log(classes);\n  res.json(arr);\n};\n\nexport default nb;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/pages/api/nb.ts"],"names":["csvToJson","require","mean","arr","nb","req","res","classes","Map","rawJson","fieldDelimiter","getJsonFromCsv","headers","i","length","has","species","tmp","Object","keys","attribute","toString","set","pop","Array","from","console","log","json"],"mappings":"AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAIC,GAAD,IAAiC,CAAE,CAAhD;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,EAAE,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AACxD,MAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd,CADwD,CAChC;;AAExB;;AACA,QAAMC,OAAO,GAAGT,SAAS,CACtBU,cADa,CACE,GADF,EAEbC,cAFa,CAEE,wBAFF,CAAhB;AAIA,MAAIC,OAAsB,GAAG,IAA7B,CARwD,CAQtB;;AAElC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAI,CAACN,OAAO,CAACQ,GAAR,CAAYN,OAAO,CAACI,CAAD,CAAP,CAAWG,OAAvB,CAAL,EAAsC;AACpC;AACA,UAAIC,GAAG,GACLR,OAAO,CAACI,CAAD,CAAP,CAAWK,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,EAAwBK,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,EAAwBC,MAAxB,GAAiC,CAAzD,CAAX,CADF,CAFoC,CAGsC;;AAE1E,UAAIM,SAAiB,GAAGF,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,EAAwBQ,QAAxB,EAAxB;AAEAd,MAAAA,OAAO,CAACe,GAAR,CAAYL,GAAZ,EAAiB;AAAE,SAACG,SAAD,GAAa;AAAf,OAAjB;AACD;AAED;;;AACA,QAAI,CAACR,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGM,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACI,CAAD,CAAnB,CAAV;AACAD,MAAAA,OAAO,CAACW,GAAR,GAFY,CAEE;AACf;AACF;AAED;;;AACA,MAAIpB,GAAG,GAAGqB,KAAK,CAACC,IAAN,CAAWlB,OAAO,CAACY,IAAR,EAAX,CAAV;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAYpB,OAAZ;AAEAD,EAAAA,GAAG,CAACsB,IAAJ,CAASzB,GAAT;AACD,CAnCD;;AAqCA,eAAeC,EAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nlet csvToJson = require('convert-csv-to-json')\r\n\r\n/**\r\n * @description calculate mean\r\n * @param arr\r\n */\r\nconst mean = (arr: Array<number | string>) => {}\r\n\r\n/**\r\n * @description api\r\n * @param req\r\n * @param res\r\n */\r\nconst nb = (req: NextApiRequest, res: NextApiResponse) => {\r\n  let classes = new Map() // storing classes\r\n\r\n  /* Convert csv to json */\r\n  const rawJson = csvToJson\r\n    .fieldDelimiter(',')\r\n    .getJsonFromCsv('./shared/data/iris.csv')\r\n\r\n  let headers: Array<string> = null // table headers, e.g. sepal_length\r\n\r\n  /* Retrieve classes */\r\n  for (let i = 0; i < rawJson.length; i++) {\r\n    if (!classes.has(rawJson[i].species)) {\r\n      /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\r\n      let tmp =\r\n        rawJson[i][Object.keys(rawJson[i])[Object.keys(rawJson[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n      let attribute: string = Object.keys(rawJson[i]).toString()\r\n\r\n      classes.set(tmp, { [attribute]: null })\r\n    }\r\n\r\n    /* We only want to store it once and not every loop, why it has ! since it's initiated as null */\r\n    if (!headers) {\r\n      headers = Object.keys(rawJson[i])\r\n      headers.pop() // remove last element, e.g. species... again, only works if it's stored last in table\r\n    }\r\n  }\r\n\r\n  /* Map -> Array ... it has the classes names */\r\n  let arr = Array.from(classes.keys())\r\n\r\n  console.log(classes)\r\n\r\n  res.json(arr)\r\n}\r\n\r\nexport default nb\r\n"]},"metadata":{},"sourceType":"module"}
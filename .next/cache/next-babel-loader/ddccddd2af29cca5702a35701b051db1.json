{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class NaiveBayes {\n  // e.g. \"species\"\n  constructor() {\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"group\", data => {\n      for (let i = 0; i < data.length; i++) {\n        /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\n        let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n        /* Attributes of class */\n\n        let attributes = Object.keys(data[i]);\n        this.type = attributes.pop(); // save and remove, e.g. \"species\" from object\n\n        /* Create object and store table headers*/\n\n        this.obj[tmp] = attributes.reduce((acc, cur) => {\n          this.fit(data[i], cur);\n          acc[cur] = null;\n          return acc;\n        }, {});\n      }\n    });\n\n    _defineProperty(this, \"fit\", (x, y) => {\n      console.log(y + ' = ' + x[y] + ' (' + x[this.type] + ')');\n    });\n\n    this.obj = {};\n  }\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\n\n\n  predict() {\n    return null;\n  }\n\n  accuracy_score() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/shared/class/NaiveBayes.ts"],"names":["NaiveBayes","constructor","data","i","length","tmp","Object","keys","attributes","type","pop","obj","reduce","acc","cur","fit","x","y","console","log","predict","accuracy_score"],"mappings":";;AAAA,OAAO,MAAMA,UAAN,CAAiB;AAET;AAEbC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA,mCAQLC,IAAD,IAAkC;AACxC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC;AACA,YAAIE,GAAG,GAAGH,IAAI,CAACC,CAAD,CAAJ,CAAQG,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,CAAD,CAAhB,EAAqBG,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAV,CAFoC,CAEqC;;AAEzE;;AACA,YAAII,UAAU,GAAGF,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,CAAD,CAAhB,CAAjB;AACA,aAAKM,IAAL,GAAYD,UAAU,CAACE,GAAX,EAAZ,CANoC,CAMP;;AAE7B;;AACA,aAAKC,GAAL,CAASN,GAAT,IAAgBG,UAAU,CAACI,MAAX,CAAkB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9C,eAAKC,GAAL,CAASb,IAAI,CAACC,CAAD,CAAb,EAAkBW,GAAlB;AACAD,UAAAA,GAAG,CAACC,GAAD,CAAH,GAAW,IAAX;AACA,iBAAOD,GAAP;AACD,SAJe,EAIb,EAJa,CAAhB;AAKD;AACF,KAxBa;;AAAA,iCA+BR,CAACG,CAAD,EAAIC,CAAJ,KAAgB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,GAAG,KAAJ,GAAYD,CAAC,CAACC,CAAD,CAAb,GAAmB,IAAnB,GAA0BD,CAAC,CAAC,KAAKP,IAAN,CAA3B,GAAyC,GAArD;AACD,KAjCa;;AACZ,SAAKE,GAAL,GAAW,EAAX;AACD;AAED;AACF;AACA;AACA;;;AA4BES,EAAAA,OAAO,GAAW;AAChB,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAW;AACvB,WAAO,IAAP;AACD;;AA7CqB","sourcesContent":["export class NaiveBayes {\r\n  obj: Object\r\n  type: string // e.g. \"species\"\r\n\r\n  constructor() {\r\n    this.obj = {}\r\n  }\r\n\r\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\r\n  group = (data: Array<string | number>) => {\r\n    for (let i = 0; i < data.length; i++) {\r\n      /* Stores last object value. Will only work when class is stored last in table, thus last in object. For dynamic purpose. */\r\n      let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n      /* Attributes of class */\r\n      let attributes = Object.keys(data[i])\r\n      this.type = attributes.pop() // save and remove, e.g. \"species\" from object\r\n\r\n      /* Create object and store table headers*/\r\n      this.obj[tmp] = attributes.reduce((acc, cur) => {\r\n        this.fit(data[i], cur)\r\n        acc[cur] = null\r\n        return acc\r\n      }, {})\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description this method trains the model\r\n   * @param x is e.g. sepal_length\r\n   * @param y is the example value\r\n   */\r\n  fit = (x, y): void => {\r\n    console.log(y + ' = ' + x[y] + ' (' + x[this.type] + ')')\r\n  }\r\n\r\n  predict(): number {\r\n    return null\r\n  }\r\n\r\n  accuracy_score(): number {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class NaiveBayes {\n  // e.g. \"species\"\n  constructor() {\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"arr\", void 0);\n\n    _defineProperty(this, \"group\", data => {\n      let arr = [];\n\n      for (let i = 0; i < data.length; i++) {\n        let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n        for (let j = 0; j < arr.length; j++) {\n          if (arr[j] !== tmp) arr.push(tmp);\n        }\n      }\n\n      console.log(arr);\n    });\n\n    _defineProperty(this, \"fit\", (x, y) => {// this.obj[x].sepal_length += parseFloat(y['sepal_length'])\n    });\n\n    this.obj = {};\n    this.arr = [];\n  }\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\n\n\n  predict() {\n    return null;\n  }\n\n  accuracy_score() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/shared/class/NaiveBayes.ts"],"names":["NaiveBayes","constructor","data","arr","i","length","tmp","Object","keys","j","push","console","log","x","y","obj","predict","accuracy_score"],"mappings":";;AAAA,OAAO,MAAMA,UAAN,CAAiB;AAET;AAGbC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AAAA,mCASLC,IAAD,IAAkC;AACxC,UAAIC,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIE,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQG,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,EAAqBG,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAV,CADoC,CACqC;;AAEzE,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACE,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,cAAIN,GAAG,CAACM,CAAD,CAAH,KAAWH,GAAf,EAAoBH,GAAG,CAACO,IAAJ,CAASJ,GAAT;AACrB;AACF;;AAEDK,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACD,KArBa;;AAAA,iCA4BR,CAACU,CAAD,EAAIC,CAAJ,KAAgB,CACpB;AACD,KA9Ba;;AACZ,SAAKC,GAAL,GAAW,EAAX;AACA,SAAKZ,GAAL,GAAW,EAAX;AACD;AAED;AACF;AACA;AACA;;;AAwBEa,EAAAA,OAAO,GAAW;AAChB,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAW;AACvB,WAAO,IAAP;AACD;;AA3CqB","sourcesContent":["export class NaiveBayes {\r\n  obj: Object\r\n  type: string // e.g. \"species\"\r\n  arr: Array<string | number>\r\n\r\n  constructor() {\r\n    this.obj = {}\r\n    this.arr = []\r\n  }\r\n\r\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\r\n  group = (data: Array<string | number>) => {\r\n    let arr = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n      for (let j = 0; j < arr.length; j++) {\r\n        if (arr[j] !== tmp) arr.push(tmp)\r\n      }\r\n    }\r\n\r\n    console.log(arr)\r\n  }\r\n\r\n  /**\r\n   * @description this method helps train the model\r\n   * @param x\r\n   * @param y\r\n   */\r\n  fit = (x, y): void => {\r\n    // this.obj[x].sepal_length += parseFloat(y['sepal_length'])\r\n  }\r\n\r\n  predict(): number {\r\n    return null\r\n  }\r\n\r\n  accuracy_score(): number {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
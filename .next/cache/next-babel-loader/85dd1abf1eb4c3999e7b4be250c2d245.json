{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class NaiveBayes {\n  constructor() {\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"label\", void 0);\n\n    _defineProperty(this, \"group\", data => {\n      let labels = [];\n\n      for (let i = 0; i < data.length; i++) {\n        let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n        if (!this.obj[tmp]) {\n          labels.push([labels.length, tmp]);\n          this.obj[tmp] = [];\n        }\n        /* Attributes of class */\n\n\n        let attributes = Object.keys(data[i]);\n        let type = attributes.pop(); // save and remove, e.g. \"species\" from object\n\n        if (data[i][type] === tmp) {\n          data[i][type] = labels.length;\n          this.obj[tmp].push(data[i]);\n        }\n      }\n\n      let size = 0;\n\n      for (let key in this.obj) {\n        if (this.obj.hasOwnProperty(key)) {\n          size++;\n          this.obj[size] = this.obj[key];\n          delete this.obj[key];\n        }\n      }\n\n      console.log(labels);\n    });\n\n    _defineProperty(this, \"fit\", (X, y) => {// console.log(X)\n    });\n\n    this.obj = {};\n    this.label = [];\n  }\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\n\n\n  predict() {\n    return null;\n  }\n\n  accuracy_score() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/shared/class/NaiveBayes.ts"],"names":["NaiveBayes","constructor","data","labels","i","length","tmp","Object","keys","obj","push","attributes","type","pop","size","key","hasOwnProperty","console","log","X","y","label","predict","accuracy_score"],"mappings":";;AAAA,OAAO,MAAMA,UAAN,CAAiB;AAItBC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA,mCASLC,IAAD,IAAkC;AACxC,UAAIC,MAAM,GAAG,EAAb;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIE,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQG,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,EAAqBG,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAV,CADoC,CACqC;;AAEzE,YAAI,CAAC,KAAKI,GAAL,CAASH,GAAT,CAAL,EAAoB;AAClBH,UAAAA,MAAM,CAACO,IAAP,CAAY,CAACP,MAAM,CAACE,MAAR,EAAgBC,GAAhB,CAAZ;AACA,eAAKG,GAAL,CAASH,GAAT,IAAgB,EAAhB;AACD;AAED;;;AACA,YAAIK,UAAU,GAAGJ,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,CAAjB;AACA,YAAIQ,IAAI,GAAGD,UAAU,CAACE,GAAX,EAAX,CAVoC,CAUR;;AAE5B,YAAIX,IAAI,CAACE,CAAD,CAAJ,CAAQQ,IAAR,MAAkBN,GAAtB,EAA2B;AACzBJ,UAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQQ,IAAR,IAAgBT,MAAM,CAACE,MAAvB;AACA,eAAKI,GAAL,CAASH,GAAT,EAAcI,IAAd,CAAmBR,IAAI,CAACE,CAAD,CAAvB;AACD;AACF;;AAED,UAAIU,IAAI,GAAG,CAAX;;AAEA,WAAK,IAAIC,GAAT,IAAgB,KAAKN,GAArB,EAA0B;AACxB,YAAI,KAAKA,GAAL,CAASO,cAAT,CAAwBD,GAAxB,CAAJ,EAAkC;AAChCD,UAAAA,IAAI;AACJ,eAAKL,GAAL,CAASK,IAAT,IAAiB,KAAKL,GAAL,CAASM,GAAT,CAAjB;AACA,iBAAO,KAAKN,GAAL,CAASM,GAAT,CAAP;AACD;AACF;;AAEDE,MAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACD,KAzCa;;AAAA,iCAgDR,CAACgB,CAAD,EAAIC,CAAJ,KAAgB,CACpB;AACD,KAlDa;;AACZ,SAAKX,GAAL,GAAW,EAAX;AACA,SAAKY,KAAL,GAAa,EAAb;AACD;AAED;AACF;AACA;AACA;;;AA4CEC,EAAAA,OAAO,GAAW;AAChB,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAW;AACvB,WAAO,IAAP;AACD;;AA9DqB","sourcesContent":["export class NaiveBayes {\r\n  obj: Object\r\n  label: Array<string | number>\r\n\r\n  constructor() {\r\n    this.obj = {}\r\n    this.label = []\r\n  }\r\n\r\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\r\n  group = (data: Array<string | number>) => {\r\n    let labels = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n      if (!this.obj[tmp]) {\r\n        labels.push([labels.length, tmp])\r\n        this.obj[tmp] = []\r\n      }\r\n\r\n      /* Attributes of class */\r\n      let attributes = Object.keys(data[i])\r\n      let type = attributes.pop() // save and remove, e.g. \"species\" from object\r\n\r\n      if (data[i][type] === tmp) {\r\n        data[i][type] = labels.length\r\n        this.obj[tmp].push(data[i])\r\n      }\r\n    }\r\n\r\n    let size = 0\r\n\r\n    for (let key in this.obj) {\r\n      if (this.obj.hasOwnProperty(key)) {\r\n        size++\r\n        this.obj[size] = this.obj[key]\r\n        delete this.obj[key]\r\n      }\r\n    }\r\n\r\n    console.log(labels)\r\n  }\r\n\r\n  /**\r\n   * @description this method helps train the model\r\n   * @param x\r\n   * @param y\r\n   */\r\n  fit = (X, y): void => {\r\n    // console.log(X)\r\n  }\r\n\r\n  predict(): number {\r\n    return null\r\n  }\r\n\r\n  accuracy_score(): number {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
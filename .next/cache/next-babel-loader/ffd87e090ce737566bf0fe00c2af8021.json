{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class NaiveBayes {\n  constructor() {\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"label\", void 0);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"group\", data => {\n      let arr = [];\n\n      for (let i = 0; i < data.length; i++) {\n        let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]]; // class name, e.g. Iris-setosa\n\n        arr.push([tmp, arr.length + 1]);\n\n        if (!this.obj[tmp]) {\n          this.obj[tmp] = [];\n        }\n        /* Attributes of class */\n\n\n        let attributes = Object.keys(data[i]);\n        let type = attributes.pop(); // save and remove, e.g. \"species\" from object\n\n        if (data[i][type] === tmp) {\n          // data[i][type] = ?\n          this.obj[tmp].push(data[i]);\n        }\n      }\n\n      for (let key in this.obj) {\n        if (this.obj.hasOwnProperty(key)) {\n          this.fit(this.obj[key], key);\n        }\n      }\n\n      console.log(arr);\n    });\n\n    _defineProperty(this, \"fit\", (X, y) => {\n      console.log(X);\n    });\n\n    this.obj = {};\n    this.label = [];\n    this.map = new Map();\n  }\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\n\n\n  predict() {\n    return null;\n  }\n\n  accuracy_score() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A4/shared/class/NaiveBayes.ts"],"names":["NaiveBayes","constructor","data","arr","i","length","tmp","Object","keys","push","obj","attributes","type","pop","key","hasOwnProperty","fit","console","log","X","y","label","map","Map","predict","accuracy_score"],"mappings":";;AAAA,OAAO,MAAMA,UAAN,CAAiB;AAKtBC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AAAA,mCAULC,IAAD,IAAkC;AACxC,UAAIC,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIE,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQG,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,EAAqBG,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,EAAqBC,MAArB,GAA8B,CAAnD,CAAR,CAAV,CADoC,CACqC;;AAEzEF,QAAAA,GAAG,CAACM,IAAJ,CAAS,CAACH,GAAD,EAAMH,GAAG,CAACE,MAAJ,GAAa,CAAnB,CAAT;;AAEA,YAAI,CAAC,KAAKK,GAAL,CAASJ,GAAT,CAAL,EAAoB;AAClB,eAAKI,GAAL,CAASJ,GAAT,IAAgB,EAAhB;AACD;AAED;;;AACA,YAAIK,UAAU,GAAGJ,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACE,CAAD,CAAhB,CAAjB;AACA,YAAIQ,IAAI,GAAGD,UAAU,CAACE,GAAX,EAAX,CAXoC,CAWR;;AAE5B,YAAIX,IAAI,CAACE,CAAD,CAAJ,CAAQQ,IAAR,MAAkBN,GAAtB,EAA2B;AACzB;AACA,eAAKI,GAAL,CAASJ,GAAT,EAAcG,IAAd,CAAmBP,IAAI,CAACE,CAAD,CAAvB;AACD;AACF;;AAED,WAAK,IAAIU,GAAT,IAAgB,KAAKJ,GAArB,EAA0B;AACxB,YAAI,KAAKA,GAAL,CAASK,cAAT,CAAwBD,GAAxB,CAAJ,EAAkC;AAChC,eAAKE,GAAL,CAAS,KAAKN,GAAL,CAASI,GAAT,CAAT,EAAwBA,GAAxB;AACD;AACF;;AAEDG,MAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ;AACD,KAvCa;;AAAA,iCA8CR,CAACgB,CAAD,EAAIC,CAAJ,KAAgB;AACpBH,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACD,KAhDa;;AACZ,SAAKT,GAAL,GAAW,EAAX;AACA,SAAKW,KAAL,GAAa,EAAb;AACA,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACD;AAED;AACF;AACA;AACA;;;AAyCEC,EAAAA,OAAO,GAAW;AAChB,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAW;AACvB,WAAO,IAAP;AACD;;AA7DqB","sourcesContent":["export class NaiveBayes {\r\n  obj: Object\r\n  label: Array<string | number>\r\n  map\r\n\r\n  constructor() {\r\n    this.obj = {}\r\n    this.label = []\r\n    this.map = new Map()\r\n  }\r\n\r\n  /**\r\n   * @description this method seperates data based on class\r\n   * @param data\r\n   */\r\n  group = (data: Array<string | number>) => {\r\n    let arr = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let tmp = data[i][Object.keys(data[i])[Object.keys(data[i]).length - 1]] // class name, e.g. Iris-setosa\r\n\r\n      arr.push([tmp, arr.length + 1])\r\n\r\n      if (!this.obj[tmp]) {\r\n        this.obj[tmp] = []\r\n      }\r\n\r\n      /* Attributes of class */\r\n      let attributes = Object.keys(data[i])\r\n      let type = attributes.pop() // save and remove, e.g. \"species\" from object\r\n\r\n      if (data[i][type] === tmp) {\r\n        // data[i][type] = ?\r\n        this.obj[tmp].push(data[i])\r\n      }\r\n    }\r\n\r\n    for (let key in this.obj) {\r\n      if (this.obj.hasOwnProperty(key)) {\r\n        this.fit(this.obj[key], key)\r\n      }\r\n    }\r\n\r\n    console.log(arr)\r\n  }\r\n\r\n  /**\r\n   * @description this method helps train the model\r\n   * @param x\r\n   * @param y\r\n   */\r\n  fit = (X, y): void => {\r\n    console.log(X)\r\n  }\r\n\r\n  predict(): number {\r\n    return null\r\n  }\r\n\r\n  accuracy_score(): number {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}